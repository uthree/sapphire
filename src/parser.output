Terminals which are not used

   PULS
   MINUS
   ASTERISK
   SLASH
   PERCENT
   EQUAL
   COMMA
   COLON
   SEMICOLON
   LESSTHAN
   GREATERTHAN
   LEFT_PARENTHESIS
   RIGHT_PARENTHESIS
   LEFT_BLACKET
   RIGHT_BLACKET
   LEFT_CURLY_BLACKET
   RIGHT_CURLY_BLACKET
   EQUAL_EQUAL
   LESSTHAN_EQUAL
   GREATERTHAN_EQUAL
   NOT_EQUAL
   PULS_EQUAL
   MINUS_EQUAL
   ASTERISK_EQUAL
   SLASH_EQUAL
   KW_AND
   KW_OR
   KW_NOT
   KW_XOR
   KW_NAND
   LW_NOR
   KW_IMPORT
   KW_FROM
   KW_AS
   KW_CLASS
   KW_FUNCTION
   KW_CONSTRUCTOR
   KW_GETTER
   KW_SETTER
   KW_IF
   KW_ELSE
   KW_END
   KW_WHILE
   KW_UNTIL
   KW_BREAK
   KW_RETURN
   BOOL_LITERAL
   NIL_LITERAL


Grammar

    0 $accept: program $end

    1 program: expression NEWLINE

    2 expression: literal
    3           | scope

    4 literal: INTEGER_LITERAL
    5        | FLOAT_LITERAL
    6        | STRING_LITERAL

    7 scope: IDENTIFIER
    8      | scope PERIOD IDENTIFIER


Terminals, with rules where they appear

$end (0) 0
error (256)
PULS (258)
MINUS (259)
ASTERISK (260)
SLASH (261)
PERCENT (262)
EQUAL (263)
PERIOD (264) 8
COMMA (265)
COLON (266)
SEMICOLON (267)
LESSTHAN (268)
GREATERTHAN (269)
LEFT_PARENTHESIS (270)
RIGHT_PARENTHESIS (271)
LEFT_BLACKET (272)
RIGHT_BLACKET (273)
LEFT_CURLY_BLACKET (274)
RIGHT_CURLY_BLACKET (275)
EQUAL_EQUAL (276)
LESSTHAN_EQUAL (277)
GREATERTHAN_EQUAL (278)
NOT_EQUAL (279)
PULS_EQUAL (280)
MINUS_EQUAL (281)
ASTERISK_EQUAL (282)
SLASH_EQUAL (283)
NEWLINE (284) 1
KW_AND (285)
KW_OR (286)
KW_NOT (287)
KW_XOR (288)
KW_NAND (289)
LW_NOR (290)
KW_IMPORT (291)
KW_FROM (292)
KW_AS (293)
KW_CLASS (294)
KW_FUNCTION (295)
KW_CONSTRUCTOR (296)
KW_GETTER (297)
KW_SETTER (298)
KW_IF (299)
KW_ELSE (300)
KW_END (301)
KW_WHILE (302)
KW_UNTIL (303)
KW_BREAK (304)
KW_RETURN (305)
INTEGER_LITERAL (306) 4
FLOAT_LITERAL (307) 5
BOOL_LITERAL (308)
NIL_LITERAL (309)
STRING_LITERAL (310) 6
IDENTIFIER (311) 7 8


Nonterminals, with rules where they appear

$accept (57)
    on left: 0
program (58)
    on left: 1, on right: 0
expression (59)
    on left: 2 3, on right: 1
literal (60)
    on left: 4 5 6, on right: 2
scope (61)
    on left: 7 8, on right: 3 8


state 0

    0 $accept: . program $end

    INTEGER_LITERAL  shift, and go to state 1
    FLOAT_LITERAL    shift, and go to state 2
    STRING_LITERAL   shift, and go to state 3
    IDENTIFIER       shift, and go to state 4

    program     go to state 5
    expression  go to state 6
    literal     go to state 7
    scope       go to state 8


state 1

    4 literal: INTEGER_LITERAL .

    $default  reduce using rule 4 (literal)


state 2

    5 literal: FLOAT_LITERAL .

    $default  reduce using rule 5 (literal)


state 3

    6 literal: STRING_LITERAL .

    $default  reduce using rule 6 (literal)


state 4

    7 scope: IDENTIFIER .

    $default  reduce using rule 7 (scope)


state 5

    0 $accept: program . $end

    $end  shift, and go to state 9


state 6

    1 program: expression . NEWLINE

    NEWLINE  shift, and go to state 10


state 7

    2 expression: literal .

    $default  reduce using rule 2 (expression)


state 8

    3 expression: scope .
    8 scope: scope . PERIOD IDENTIFIER

    PERIOD  shift, and go to state 11

    $default  reduce using rule 3 (expression)


state 9

    0 $accept: program $end .

    $default  accept


state 10

    1 program: expression NEWLINE .

    $default  reduce using rule 1 (program)


state 11

    8 scope: scope PERIOD . IDENTIFIER

    IDENTIFIER  shift, and go to state 12


state 12

    8 scope: scope PERIOD IDENTIFIER .

    $default  reduce using rule 8 (scope)
